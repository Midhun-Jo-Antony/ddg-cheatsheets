{
    "id": "groovy_cheat_sheet",
    "name": "Groovy",
    "description": "Groovy cheat Sheet",
    "metadata": {
        "sourceName": "Github",
        "sourceUrl": "http://voituk.kiev.ua/wp-content/uploads/2008/10/groovy_online_100.pdf"
    },
    "template_type": "reference",
    "section_order": [
        "Type List",
        "Operators",
        "Comparison Operators",
        "Truth Condition",
        "Loops",
        "Exceptions",
        "Class Definition"
        ],
  "sections": {
  "Type List":[{
      "key":"java.lang.String",
      "val":"Strings"
    }, {
      "key":"java.lang.Character",
      "val":"Single Unicode Character"
    }, {
      "key":"java.lang.Boolean",
      "val":"Boolean type"
    }, {
      "key":"java.lang.Byte",
      "val":"Eight-bit integer"
    }, {
      "key":"java.lang.Integer",
      "val":"32-bit integer"
    }, {
      "key":"java.lang.Float",
      "val":"32-bit floating point number"
    }, {
      "key":"java.lang.Double",
      "val":"64-bit doulbe precision floating point number"
    }, {
      "key":"java.math.BigDecimal",
      "val":"Uncapped floating point number"
    }, {
      "key":"java.util.List",
      "val":"Contain values of any type"
    }, {
      "key":"java.util.Map",
      "val":"No need for quotes"
    }
  ],
  "Operators": [{
    "key":"+",
    "val":"a.plus(b)"
  }, {
    "key":"-",
    "val":"a.minus(b)"
  }, {
    "key":"*",
    "val":"a.multipy(b)"
  }, {
    "key":"/",
    "val":"a.div(b)"
  }, {
    "key":"%",
    "val":"a.mod(b)"
  }, {
    "key":"**",
    "val":"a.power(b)"
  }, {
    "key":"&",
    "val":"a.and(b)"
  }, {
    "key":"a in b",
    "val":"b.isCase(a)"
  }, {
    "key":"<<",
    "val":"a.leftShift(b)"
  }, {
    "key":">>",
    "val":"a.rightShift(b)"
  }, {
    "key":"++",
    "val":"a.next()"
  }, {
    "key":"--",
    "val":"a.previous()"
  }
  ],

    "Comparison Operators": [{
      "key":"a == b",
      "val":"Value based equality"
    }, {
      "key":"a != b",
      "val":"Value based inequality"
    }, {
      "key":"a < b",
      "val":"Less than"
    }, {
      "key":"a <= b",
      "val":"Less than or equal"
    }, {
      "key":"a <=> b",
      "val":"Compare "
    }, {
      "key":"a =~ b",
      "val":"Regex pattern match"
    }, {
      "key":"a?.b",
      "val":"Null-safe navigation"
    }, {
      "key":"a ?: b",
      "val":"Elvis operator"
    }
    ],

  "Truth Condition": [{
    "key":"String",
    "val":"False if empty or null"
  },{
    "key":"Number",
    "val":"False if zero or null"
  },{
    "key":"Collection",
    "val":"False if zero or null"
  },{
    "key":"Map",
    "val":"False if zero or null"
  },{
    "key":"Matcher (=~)",
    "val":"False if no match found"
  }
  ],
  "Loops":[{
    "key":"for (<var> in <value>) {...}",
    "val":"Basic for loop"
  },{
    "key":"for (int i = 0; i < 10; i += 2) {...}",
    "val":"For loop similar to java"
  },{
    "key":"while (<expr>) {...}",
    "val":"Basic while loop"
  }
  ],
     "Exceptions": [{
       "key":"try {...}",
       "val":"Try block syntax"
     },{
       "key":"catch (SpecficException ex){...}",
       "val":"Catch block syntax"
     },{
       "key":"finally {...}",
       "val":"Default exception execution"
     }
     ],

     "Class Definition": [{
       "key":"F1",
       "val":"Repeat of previously entered characters"
     },{
       "key":"F2",
       "val":"Copies any number of characters from previous command line"
     },{
       "key":"F3",
       "val":"Repeats content of previous command line"
     },{
       "key":"F4",
       "val":"Deletes characters from previous command line"
     },{
       "key":"F5",
       "val":"Return to previous command line"
     },{
       "key":"F6",
       "val":"Enters (Ctrl+z)"
     },{
       "key":"F7",
       "val":"History of command line entries"
     },{
       "key":"F8",
       "val":"Display previous command line entries"
     },{
       "key":"F9",
       "val":"Recall previous entries by number"
     }
     ]
}
}
